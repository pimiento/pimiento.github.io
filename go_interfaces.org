#+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} _:{} -:t f:t *:t <:t todo:t
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:org-info.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="solarized-dark.css" />
#+KEYWORDS: Go
#+HTML_LINK_HOME: https://pimiento.github.io/
#+HTML_LINK_UP: https://pimiento.github.io/
#+TITLE: Go: Interfaces

* Interfaces
  An interface type is defined by a set of methods. A value of interface type can hold any value that implements those methods.
  This time we made the greeting feature more generic by defining a function called Greet which takes a param of interface type Namer. Namer is a new interface we defined which only defines one method: Name(). So Greet() will accept as param any value which has a Name() method defined.
  #+BEGIN_SRC go :results output :exports both
    package main

    import (
            "fmt"
            "os"
    )

    type User struct {
            FirstName, LastName string
    }

    func (u *User) Name() string {
            return fmt.Sprintf("%s %s", u.FirstName, u.LastName)
    }

    type Namer interface {
            Name() string
    }

    func Greet(n Namer) string {
            return fmt.Sprintf("Dear %s", n.Name())
    }

    type Reader interface {
            Read(b []byte) (n int, err error)
    }

    type Writer interface {
            Write(b []byte) (n int, err error)
    }

    type ReadWriter interface {
            Reader
            Writer
    }

    func main() {
            u := &User{"Pavel", "Vavilin"}
            fmt.Println(Greet(u))

            var w Writer
            // os.Stdout implements Writer
            w = os.Stdout
            fmt.Fprintf(w, "hello, writer\n")
    }
  #+END_SRC

  #+RESULTS:
  : Dear Pavel Vavilin
  : hello, writer

* Errors
  An error is anything that can describe itself as an error string. The idea is captured by the predefined, built-in interface type, error, with its single method, *Error*, returning a string:
  #+BEGIN_SRC go :results none :exports code
    type error interface {
            Error() string
    }
  #+END_SRC
  The *fmt* packageâ€™s various print routines automatically know to call the method when asked to print an error.
  #+BEGIN_SRC go :results output :exports both
    package main

    import (
            "fmt"
            "time"
    )

    type MyError struct {
            When time.Time
            What string
    }

    func (e *MyError) Error() string {
            return fmt.Sprintf("at %v, %s", e.When, e.What)
    }

    func run() error {
            return &MyError{
                    time.Now(),
                    "it didn't work",
            }
    }

    func main() {
            if err := run(); err != nil {
                    fmt.Println(err)
            }
    }
  #+END_SRC

  #+RESULTS:
  : at 2017-10-27 01:07:38.957961587 +1000 +10, it didn't work
